buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
		maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
		//Parchment Mappings
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
		classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
		classpath 'org.parchmentmc:librarian:1.+'
    }
}
apply plugin: 'net.minecraftforge.gradle'

apply plugin: 'org.spongepowered.mixin'
apply plugin: 'org.parchmentmc.librarian.forgegradle'

apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = "$mcVersion-$modVersion"
group = 'team.cqr.cqweaponry' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "$modName"

java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.

configurations {
    includedDependencies
    atDependencies
    buildDependencies

    implementation.extendsFrom(includedDependencies)
    implementation.extendsFrom(atDependencies)
}

repositories {
    // Github Releases
    ivy {
        url 'https://github.com'

        patternLayout {
            artifact '[organisation]/[module]/releases/download/v[revision]/[module]-[revision].[ext]'
        }

        metadataSources { artifact() } 
    }

    // CurseForge
    maven { url 'https://www.cursemaven.com' }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.2.29'

    includedDependencies 'meldexun:ASMUtil:1.0.0@jar'
    includedDependencies 'meldexun:ReflectionUtil:1.0.0@jar'
	
	atDependencies 'curse.maven:ReachFix-556777:3648997'
	
	//Mixin annotations
	annotationProcessor 'org.spongepowered:mixin:0.8:processor'
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'parchment', version: '2021.10.17-1.16.5'
    
    def atDepFileTree = files(configurations.atDependencies.collect { zipTree(it) }).getAsFileTree()
    accessTransformer = files(
        'src/main/resources/META-INF/accesstransformer.cfg',
        atDepFileTree.matching { include 'META-INF/accesstransformer.cfg' }
    )

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')
			
			taskName 'runClient CQW 1.16.5'
            environment 'MC_VERSION', '1.16.5'
			
			arg "-mixin.config=cqweaponry.mixins.json"

            property 'forge.logging.markers', 'REGISTRIES'
			
            property 'forge.logging.console.level', 'debug'
			
            property 'fml.coreMods.load', 'meldexun.reachfix.asm.ReachFixPlugin'

            mods {
                cqweaponry {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
			
			taskName 'runServer CQW 1.16.5'
            environment 'MC_VERSION', '1.16.5'
			
			arg "-mixin.config=cqweaponry.mixins.json"
			
            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'
			
			property 'fml.coreMods.load', 'meldexun.reachfix.asm.ReachFixPlugin'

            mods {
                cqweaponry {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

mixin {
    add sourceSets.main, "cqweaponry.refmap.json"
}

// Generate a fixed tsrg file after generating the default tsrg file
createMcpToSrg {
    outputs.upToDateWhen {false}
    doLast {
        fixFG5TsrgForMixinAP(output.get().asFile, file("${buildDir}/fixMcpToSrg/output.tsrg"))
    }
}

// Tell mixin to use the fixed TSRG file
mixin {
    reobfSrgFile = file("${buildDir}/fixMcpToSrg/output.tsrg")
}

// Function that actually fixes the TSRG file
static def fixFG5TsrgForMixinAP(File inFile, File outFile) {
    // Make directory if needed
    outFile.parentFile.mkdirs()

    try (Scanner scanner = new Scanner(inFile); PrintWriter out = new PrintWriter(outFile)) {
        boolean firstLine = true
        while (scanner.hasNextLine()) {
            String next = scanner.nextLine()

            // Skip first 'tsrg left right' header line
            if (firstLine) {
                firstLine = false
                continue
            }

            // Skip 'static' indicators
            if (next.trim() == "static") {
                continue
            }

            // Export line otherwise
            out.println(next)
        }
    }
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {

    from {
        configurations.includedDependencies.collect { it.isDirectory() ? it : zipTree(it) }
    }
	
	classifier = 'universal'

    manifest {
        attributes([
            "Specification-Title": "$modName",
            "Specification-Vendor": "CQ-Repoured team",
            "Specification-Version": "$modVersion", // We are version 1 of ourselves
            "Implementation-Title": "$modName",
            "Implementation-Version": "$modVersion",
            "Implementation-Vendor" :"CQ-Repoured Team",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
			"MixinConfigs": "cqweaponry.mixins.json"
        ])
    }
}

compileJava {
    classpath = sourceSets.main.compileClasspath + configurations.buildDependencies
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
